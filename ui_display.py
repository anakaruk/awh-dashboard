import streamlit as st
import pandas as pd
import altair as alt

def _status_chip(name: str, is_online: bool, last_seen_text: str) -> str:
    dot = "üü¢" if is_online else "üî¥"
    return f"{name}  {dot}"

def render_controls(station_list, default_station=None, station_status=None, last_seen_map=None):
    """
    ‡πÄ‡∏û‡∏¥‡πà‡∏°:
      - default_station: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å dashboard.py)
      - station_status, last_seen_map: dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô selectbox
    """
    station_status = station_status or {}
    last_seen_map = last_seen_map or {}

    st.sidebar.header("üîß Controls")

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° label ‡πÉ‡∏´‡πâ selectbox ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏ô‡πâ‡∏≤ station
    labels = []
    value_to_label = {}
    for s in station_list:
        last_txt = last_seen_map.get(s).strftime("%Y-%m-%d %H:%M:%S") + " AZ" if last_seen_map.get(s) is not None else "‚Äî"
        lbl = _status_chip(s, station_status.get(s, False), last_txt)
        labels.append(lbl)
        value_to_label[s] = lbl

    # index ‡∏Ç‡∏≠‡∏á default
    if default_station in station_list:
        default_index = station_list.index(default_station)
    else:
        default_index = 0

    selected_label = st.sidebar.selectbox(
        "üìç Select Station",
        options=labels,
        index=default_index,
        help="‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô üü¢ ‡∏Ñ‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
    )

    # map label ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
    selected_station_name = station_list[labels.index(selected_label)]

    intake_area_options = {
        "AquaPars 1: 0.12 m¬≤": 0.12,
        "DewStand 1: 0.04 m¬≤": 0.04,
        "T50 1: 0.18 m¬≤": 0.18
    }

    intake_area_label = st.sidebar.selectbox("üß≤ Intake Area (m¬≤)", list(intake_area_options.keys()))
    intake_area = intake_area_options[intake_area_label]

    st.sidebar.markdown("---")
    st.sidebar.subheader("Date period")
    # (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ date range filter ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° widget ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á df ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÑ‡∏î‡πâ)

    field_options = [
        ("‚ùÑÔ∏è Harvesting Efficiency (%)", "harvesting_efficiency"),
        ("üíß Water Production (L)", "water_production"),
        ("üîã Energy Per Liter (kWh/L)", "energy_per_liter (kWh/L)"),
        ("üîã Power Consumption (kWh)", "accumulated_energy (kWh)"),
        ("üå´Ô∏è Abs. Intake humidity (g/m3)", "absolute_intake_air_humidity"),
        ("üå´Ô∏è Abs. Outtake humidity (g/m3)", "absolute_outtake_air_humidity"),
        ("üå´Ô∏è Adjust Abs. Outtake humidity (g/m3)", "calibrated_outtake_air_humidity"),
        ("üå°Ô∏è Intake temperature (¬∞C)", "intake_air_temperature (C)"),
        ("üí® Intake humidity (%)", "intake_air_humidity (%)"),
        ("‚Üò Intake velocity (m/s)", "intake_air_velocity (m/s)"),
        ("üî• Outtake temperature (¬∞C)", "outtake_air_temperature (C)"),
        ("üí® Outtake humidity (%)", "outtake_air_humidity (%)"),
        ("‚Üó Outtake velocity (m/s)", "outtake_air_velocity (m/s)"),
        ("üîå Current (A)", "current"),
        ("‚ö° Power (W)", "power"),
    ]

    selected_fields = ["timestamp"]
    for label, col in field_options:
        if st.sidebar.checkbox(label, value=(col == "harvesting_efficiency")):
            selected_fields.append(col)

    return selected_station_name, selected_fields, intake_area


def render_data_section(df, station_name, selected_fields):
    st.title(f"üìä AWH Dashboard ‚Äì {station_name}")

    if df.empty:
        st.warning("No data found for this station.")
        return

    available_fields = [col for col in selected_fields if col in df.columns and col != "timestamp"]

    df_sorted = df.sort_values("timestamp").copy()
    df_sorted["Date"] = df_sorted["timestamp"].dt.date
    df_sorted["Time"] = df_sorted["timestamp"].dt.strftime("%H:%M:%S")

    for field in available_fields:
        st.subheader(f"üìä {field} Overview")

        col1, col2 = st.columns([1, 2], gap="large")

        with col1:
            st.markdown("#### üìã Table")
            st.dataframe(df_sorted[["Date", "Time", field]], use_container_width=True)

            st.download_button(
                label=f"‚¨áÔ∏è Download {field} CSV",
                data=df_sorted[["Date", "Time", field]].to_csv(index=False),
                file_name=f"{station_name}_{field.replace(' ', '_')}.csv",
                mime="text/csv"
            )

        with col2:
            st.markdown("#### üìà Plot")

            df_sorted[field] = pd.to_numeric(df_sorted[field], errors="coerce")
            plot_data = df_sorted[["timestamp", field]].dropna()

            excluded_points = 0
            if field == "harvesting_efficiency":
                excluded_points = (plot_data[field] > 50).sum()
                plot_data = plot_data[plot_data[field] <= 50]

            if plot_data.empty:
                st.warning(f"‚ö†Ô∏è No data available to plot for {field}.")
                continue

            if field == "energy_per_liter (kWh/L)":
                plot_data["Hour"] = plot_data["timestamp"].dt.floor("H")
                hourly_plot = (
                    plot_data.groupby("Hour")[field]
                    .mean()
                    .reset_index()
                    .rename(columns={"Hour": "timestamp"})
                )

                chart = alt.Chart(hourly_plot).mark_bar().encode(
                    x=alt.X("timestamp:T", title="Hour", axis=alt.Axis(format="%H:%M")),
                    y=alt.Y(field, title="Energy per Liter (kWh/L)"),
                    tooltip=["timestamp", field]
                ).properties(width="container", height=300)

                st.altair_chart(chart, use_container_width=True)

            else:
                y_axis = alt.Y(
                    field,
                    title=field,
                    scale=alt.Scale(domain=[0, 30]) if field == "harvesting_efficiency" else alt.Undefined
                )

                chart = alt.Chart(plot_data).mark_circle(size=60).encode(
                    x=alt.X(
                        "timestamp:T",
                        title="Date & Time",
                        axis=alt.Axis(format="%Y-%m-%d %H:%M", labelAngle=-45)
                    ),
                    y=y_axis,
                    tooltip=["timestamp", field]
                ).properties(width="container", height=300)

                st.altair_chart(chart, use_container_width=True)

            if excluded_points > 0:
                st.caption(f"‚ö†Ô∏è {excluded_points} point(s) above 50% were excluded from the plot.")
